# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-08-02 18:46
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('plants', '0002_auto_20160715_1333'),
    ]

    operations = [
        migrations.AddField(
            model_name='family',
            name='plants',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plants_plant_related', to='plants.Plant'),
        ),
        migrations.AddField(
            model_name='familycommonname',
            name='plants',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Plant'),
        ),
        migrations.AddField(
            model_name='imageurl',
            name='plants',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Plant'),
        ),
        migrations.AddField(
            model_name='plant',
            name='active_growth_period',
            field=models.ManyToManyField(through='plants.PlantActiveGrowthPeriodByRegion', to='plants.ActiveGrowthPeriod'),
        ),
        migrations.AddField(
            model_name='plant',
            name='allelopathic',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Allelopathic'),
        ),
        migrations.AddField(
            model_name='plant',
            name='animal_food',
            field=models.ManyToManyField(through='plants.PlantAnimalFood', to='plants.AnimalFood', verbose_name='animal food'),
        ),
        migrations.AddField(
            model_name='plant',
            name='barrier',
            field=models.ManyToManyField(through='plants.PlantBarrier', to='plants.Barrier'),
        ),
        migrations.AddField(
            model_name='plant',
            name='biochemical_material_prod',
            field=models.ManyToManyField(through='plants.PlantBiochemicalMaterialProd', to='plants.BiochemicalMaterialProd', verbose_name='biochemical materials'),
        ),
        migrations.AddField(
            model_name='plant',
            name='canopy_density',
            field=models.ManyToManyField(through='plants.PlantCanopyDensityByRegion', to='plants.CanopyDensity'),
        ),
        migrations.AddField(
            model_name='plant',
            name='cultural_and_amenity_prod',
            field=models.ManyToManyField(through='plants.PlantCulturalAndAmenityProd', to='plants.CulturalAndAmenityProd', verbose_name='cultrual and amenity'),
        ),
        migrations.AddField(
            model_name='plant',
            name='degree_of_serotiny',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.DegreeOfSerotiny'),
        ),
        migrations.AddField(
            model_name='plant',
            name='drought_tol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.DroughtTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='duration',
            field=models.ManyToManyField(through='plants.PlantDurationByRegion', to='plants.Duration'),
        ),
        migrations.AddField(
            model_name='plant',
            name='endemic_status',
            field=models.ManyToManyField(through='plants.PlantEndemicStatusByRegion', to='plants.EndemicStatus'),
        ),
        migrations.AddField(
            model_name='plant',
            name='erosion_control',
            field=models.ManyToManyField(through='plants.PlantErosionControlByRegion', to='plants.ErosionControl'),
        ),
        migrations.AddField(
            model_name='plant',
            name='family',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.TheFamily'),
        ),
        migrations.AddField(
            model_name='plant',
            name='family_common_name',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.TheFamilyCommonName'),
        ),
        migrations.AddField(
            model_name='plant',
            name='fertility_needs',
            field=models.ManyToManyField(through='plants.PlantNutrientRequirementsByRegion', to='plants.NutrientRequirements', verbose_name='nutrient requirements'),
        ),
        migrations.AddField(
            model_name='plant',
            name='fire_tol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.FireTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='flood_tol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.FloodTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='flower_color',
            field=models.ManyToManyField(through='plants.PlantFlowerColor', to='plants.FlowerColor'),
        ),
        migrations.AddField(
            model_name='plant',
            name='foliage_color',
            field=models.ManyToManyField(through='plants.PlantFoliageColor', to='plants.FoliageColor'),
        ),
        migrations.AddField(
            model_name='plant',
            name='food_prod',
            field=models.ManyToManyField(through='plants.PlantFoodProd', to='plants.FoodProd'),
        ),
        migrations.AddField(
            model_name='plant',
            name='fruit_color',
            field=models.ManyToManyField(through='plants.PlantFruitColor', to='plants.FruitColor'),
        ),
        migrations.AddField(
            model_name='plant',
            name='harvest_period',
            field=models.ManyToManyField(through='plants.PlantHarvestPeriodByRegion', to='plants.HarvestPeriod'),
        ),
        migrations.AddField(
            model_name='plant',
            name='humidity_tol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.HumidityTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='layer',
            field=models.ManyToManyField(through='plants.PlantLayer', to='plants.Layer'),
        ),
        migrations.AddField(
            model_name='plant',
            name='leaf_retention',
            field=models.ManyToManyField(through='plants.PlantLeafRetentionByRegion', to='plants.LeafRetention'),
        ),
        migrations.AddField(
            model_name='plant',
            name='lifespan',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Lifespan'),
        ),
        migrations.AddField(
            model_name='plant',
            name='livestock_bloat',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.LivestockBloat'),
        ),
        migrations.AddField(
            model_name='plant',
            name='medicinals_prod',
            field=models.ManyToManyField(through='plants.PlantMedicinalsProd', to='plants.MedicinalsProd', verbose_name='medicinals'),
        ),
        migrations.AddField(
            model_name='plant',
            name='mineral_nutrients_prod',
            field=models.ManyToManyField(through='plants.PlantMineralNutrientsProd', to='plants.MineralNutrientsProd', verbose_name='mineral nutrients'),
        ),
        migrations.AddField(
            model_name='plant',
            name='plants_animal_attractor',
            field=models.ManyToManyField(related_name='a_plants_animal_attractor_related', through='plants.PlantAnimalAttractorByRegion', to='plants.Animals'),
        ),
        migrations.AddField(
            model_name='plant',
            name='plants_animal_regulator',
            field=models.ManyToManyField(through='plants.PlantAnimalRegulatorByRegion', to='plants.Animals'),
        ),
        migrations.AddField(
            model_name='plant',
            name='plants_insect_attractor',
            field=models.ManyToManyField(related_name='a_plants_insect_attractor_related', through='plants.PlantInsectAttractorByRegion', to='plants.Insects'),
        ),
        migrations.AddField(
            model_name='plant',
            name='plants_insect_regulator',
            field=models.ManyToManyField(through='plants.PlantInsectRegulatorByRegion', to='plants.Insects'),
        ),
        migrations.AddField(
            model_name='plant',
            name='raw_materials_prod',
            field=models.ManyToManyField(through='plants.PlantRawMaterialsProd', to='plants.RawMaterialsProd', verbose_name='raw materials'),
        ),
        migrations.AddField(
            model_name='plant',
            name='region',
            field=models.ManyToManyField(through='plants.PlantRegion', to='plants.Region'),
        ),
        migrations.AddField(
            model_name='plant',
            name='salt_tol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.SaltTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='serotiny',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Serotiny'),
        ),
        migrations.AddField(
            model_name='plant',
            name='shade_tol',
            field=models.ManyToManyField(through='plants.PlantShadeTolByRegion', to='plants.ShadeTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='soil_drainage_tol',
            field=models.ManyToManyField(through='plants.PlantSoilDrainageTolByRegion', to='plants.SoilDrainageTol'),
        ),
        migrations.AddField(
            model_name='plant',
            name='sun_needs',
            field=models.ManyToManyField(through='plants.PlantSunNeedsByRegion', to='plants.SunNeeds'),
        ),
        migrations.AddField(
            model_name='plant',
            name='toxicity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Toxicity'),
        ),
        migrations.AddField(
            model_name='plant',
            name='toxin_removal',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.ToxinRemoval'),
        ),
        migrations.AddField(
            model_name='plant',
            name='water_needs',
            field=models.ManyToManyField(through='plants.PlantWaterNeedsByRegion', to='plants.WaterNeeds'),
        ),
        migrations.AddField(
            model_name='plant',
            name='wind_tol',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.WindTol'),
        ),
        migrations.AddField(
            model_name='plantanimalfood',
            name='animal_food',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.AnimalFood'),
        ),
        migrations.AddField(
            model_name='plantanimalfood',
            name='plants',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Plant'),
        ),
        migrations.AddField(
            model_name='plantbarrier',
            name='barrier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Barrier'),
        ),
        migrations.AddField(
            model_name='plantbarrier',
            name='plants',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Plant'),
        ),
        migrations.AddField(
            model_name='plantbarrier',
            name='regions',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Region'),
        ),
        migrations.AddField(
            model_name='plantnutrientrequirementsbyregion',
            name='fertility_needs',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.NutrientRequirements', verbose_name='Nutrient Requirements'),
        ),
        migrations.AddField(
            model_name='plantnutrientrequirementsbyregion',
            name='plants',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Plant'),
        ),
        migrations.AddField(
            model_name='plantnutrientrequirementsbyregion',
            name='regions',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Region'),
        ),
        migrations.AddField(
            model_name='plantregion',
            name='plants',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Plant'),
        ),
        migrations.AddField(
            model_name='plantregion',
            name='regions',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='plants.Region'),
        ),
        migrations.AddField(
            model_name='spc_project',
            name='polyculture_coordinates',
            field=models.TextField(default='none'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='transactions',
            name='users',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='plants.AuthUser'),
            preserve_default=False,
        ),
        migrations.AlterUniqueTogether(
            name='familycommonname',
            unique_together=set([('value', 'plants')]),
        ),
        migrations.AlterUniqueTogether(
            name='plantbarrier',
            unique_together=set([('plants', 'regions')]),
        ),
        migrations.AlterUniqueTogether(
            name='plantnutrientrequirementsbyregion',
            unique_together=set([('plants', 'regions')]),
        ),
        migrations.AlterUniqueTogether(
            name='plantregion',
            unique_together=set([('plants', 'regions')]),
        ),
    ]
